"""
Django settings for gestor_financeiro project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import os
import dj_database_url
from google.cloud import secretmanager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

def get_secret(secret_name, project_id):
    client = secretmanager.SecretManagerServiceClient()
    request = {"name": f"projects/{project_id}/secrets/{secret_name}/versions/latest"}
    response = client.access_secret_version(request)
    return response.payload.data.decode("UTF-8")

# ID de Projeto do GCP
PROJECT_ID = 'meudindin-463521'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("django_secret_key", PROJECT_ID)
DB_USER = get_secret("db_user", PROJECT_ID)
DB_PASSWORD = get_secret("db_password", PROJECT_ID)
DB_NAME = get_secret("db_name", PROJECT_ID)
DB_CONNECTION_NAME = get_secret("db_connection_name", PROJECT_ID)


# DEBUG é False em produção.
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = []

# Se estivermos em modo de depuração (local), permita localhost.
if DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])
else:
    # Em produção, confie nos hosts do Cloud Run.
    # O Google gerencia o cabeçalho Host, mas é uma boa prática
    # adicionar o domínio esperado. O wildcard '.run.app' permite que qualquer
    # URL de serviço do Cloud Run (ex: sua-app-xyz-uc.a.run.app) acesse a aplicação.
    # É seguro, pois o Google garante que apenas o seu serviço responda nessa URL.
    ALLOWED_HOSTS.append('.run.app')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'core'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gestor_financeiro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.menu_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'gestor_financeiro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração do banco de dados
DATABASES = {
    'default': dj_database_url.config(
        default=f'postgres://{DB_USER}:{DB_PASSWORD}@/{DB_NAME}?host=/cloudsql/{DB_CONNECTION_NAME}'
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True # Garante que os formatos de data e número respeitem o locale

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Onde o 'collectstatic' vai juntar todos os arquivos estáticos
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Adiciona o armazenamento do WhiteNoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'core:login'          # ONDE FICA A PÁGINA DE LOGIN
LOGIN_REDIRECT_URL = 'core:home'  # PARA ONDE IR APÓS O LOGIN
LOGOUT_REDIRECT_URL = 'core:home' # PARA ONDE IR APÓS O LOGOUT

# Para aplicações rodando atrás de um proxy (como no Cloud Run),
# esta configuração informa ao Django para confiar no cabeçalho
# que o proxy envia para indicar uma conexão segura.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Esta é a correção principal.
# Lista os domínios que são permitidos para fazer requisições POST seguras.
# Usar o wildcard '*.run.app' é uma forma segura e flexível de permitir
# que qualquer URL do Cloud Run funcione.
CSRF_TRUSTED_ORIGINS = ['https://*.run.app']

# Opcional, mas recomendado para produção:
# Garante que os cookies CSRF e de sessão só sejam enviados via HTTPS.
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True